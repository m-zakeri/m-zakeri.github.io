<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Morteza Zakeri - Morteza</title><link>https://m-zakeri.github.io/</link><description>PhD in Computer Science</description><lastBuildDate>Thu, 20 Mar 2025 20:30:00 +0330</lastBuildDate><item><title>Services of the Intelligent Software Engineering Laboratory</title><link>https://m-zakeri.github.io/services-of-the-intelligent-software-engineering-laboratory.html</link><description>&lt;p&gt;Find all of our services here.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Thu, 20 Mar 2025 20:30:00 +0330</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2025-03-20:/services-of-the-intelligent-software-engineering-laboratory.html</guid><category>services</category><category>services</category><category>laboratory</category></item><item><title>Advanced Software Testing</title><link>https://m-zakeri.github.io/advanced-software-testing.html</link><description>&lt;p&gt;Advanced Software Testing, Graduate course.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Mon, 17 Mar 2025 20:45:00 +0330</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2025-03-17:/advanced-software-testing.html</guid><category>courses</category><category>courses</category><category>teaching</category></item><item><title>Software Architectures</title><link>https://m-zakeri.github.io/software-architectures.html</link><description>&lt;p&gt;Software Architectures, Graduate course.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Fri, 07 Mar 2025 21:00:00 +0330</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2025-03-07:/software-architectures.html</guid><category>courses</category><category>courses</category><category>teaching</category></item><item><title>A gentle introduction to search-based software refactoring</title><link>https://m-zakeri.github.io/a-gentle-introduction-to-search-based-software-refactoring.html</link><description>&lt;p&gt;Finding the best sequence of the refactoring operation to ab applied to a software system is an optimization problem. It can be solved by search techniques in the field known as search-based software engineering (SBSE). In this approach, refactorings are applied stochastically to the original software solution, and then the software is measured using a fitness function consisting of one or more software quality measures. Unfortunately, there is no technical document describing an implementation of decent search-based refactoring. In this tutorial, I am going to explain the implementation of search-based refactoring at the source code level from scratch.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Thu, 05 May 2022 00:45:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2022-05-05:/a-gentle-introduction-to-search-based-software-refactoring.html</guid><category>blog</category><category>blog</category><category>ANTLR</category><category>compiler</category><category>tutorial</category></item><item><title>CodART: Automated Source Code Refactoring Toolkit</title><link>https://m-zakeri.github.io/codart-automated-source-code-refactoring-toolkit.html</link><description>&lt;p&gt;Refactoring engines are tools that automate the application of refactorings: first, the user chooses a refactoring to apply, then the engine checks if the transformation is safe, and if so, transforms the program.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Mon, 02 May 2022 23:58:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2022-05-02:/codart-automated-source-code-refactoring-toolkit.html</guid><category>blog</category><category>blog</category></item><item><title>Automated refactoring of the Java code using ANTLR in Python</title><link>https://m-zakeri.github.io/automated-refactoring-of-the-java-code-using-antlr-in-python.html</link><description>&lt;p&gt;Refactoring is a type of program transformation that preserves the program’s behavior. The goal of refactoring is to improve the program’s internal structure without changing its external behavior. In this way, the program quality, defined and measured in terms of quality attributes, is improved. The refactoring process could be automated to reduce the required time and cost and increase the reliability of applied transformation. In this tutorial, I give a short description of how we can automate the refactoring process with ANTLR in Python.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Mon, 02 May 2022 00:30:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2022-05-02:/automated-refactoring-of-the-java-code-using-antlr-in-python.html</guid><category>blog</category><category>blog</category><category>ANTLR</category><category>compiler</category><category>tutorial</category></item><item><title>Do software engineers sacrifice themselves?</title><link>https://m-zakeri.github.io/do-software-engineers-sacrifice-themselves.html</link><description>&lt;p&gt;We all know about the advantages of agile software development methodologies, DevOps, and CICD. But, what are the negative impacts and the dark sides/dark corners of such highly accepted and recommended software development practices and mindsets on software engineers’ life?&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Mon, 05 Apr 2021 12:00:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2021-04-05:/do-software-engineers-sacrifice-themselves.html</guid><category>blog</category><category>blog</category></item><item><title>Program dynamic analysis with ANTLR</title><link>https://m-zakeri.github.io/program-dynamic-analysis-with-antlr.html</link><description>&lt;p&gt;Dynamic analysis refers to extracting specific information from the program related to the program's execution. Therefore, it requires to execute the program under analysis. Often the source code must be augmented in a way that executing the program outputs the additional information required for dynamic analysis. A well-known technique for this aim is program instrumentation. The ANTLR tool can be used to instrument the source code effectively. In this tutorial, I explain how we can use the ANTLR  tool to instrument the C++  program in the Python programming language.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Tue, 30 Mar 2021 23:45:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2021-03-30:/program-dynamic-analysis-with-antlr.html</guid><category>blog</category><category>blog</category><category>ANTLR</category><category>compiler</category><category>tutorial</category></item><item><title>Program static analysis with ANTLR</title><link>https://m-zakeri.github.io/program-static-analysis-with-antlr.html</link><description>&lt;p&gt;Static analysis means extracting specific information from the program artifacts, e.g., source code, without any execution of the program. The ANTLR tool can be used to perform all types of static analysis at the source-code level. In this tutorial, I explain how we can use the ANTLR  tool to perform some basic kinds of static analysis of the C++ programs in the Python programming language. The task I chose to explain is extracting the class diagram and computing the relevant design metrics.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Mon, 29 Mar 2021 23:45:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2021-03-29:/program-static-analysis-with-antlr.html</guid><category>blog</category><category>blog</category><category>ANTLR</category><category>compiler</category><category>tutorial</category></item><item><title>Advanced Software Engineering</title><link>https://m-zakeri.github.io/advanced-software-engineering.html</link><description>&lt;p&gt;Advanced Software Engineering, graduate course.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Tue, 23 Mar 2021 00:23:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2021-03-23:/advanced-software-engineering.html</guid><category>courses</category><category>courses</category><category>teaching</category></item><item><title>Compilers</title><link>https://m-zakeri.github.io/compilers.html</link><description>&lt;p&gt;Compiler design and constructions, Undergraduate course (Bachelor). The course is designed to:&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Tue, 23 Mar 2021 00:23:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2021-03-23:/compilers.html</guid><category>courses</category><category>courses</category><category>teaching</category></item><item><title>Patterns and Principle in Software Engineering</title><link>https://m-zakeri.github.io/patterns-and-principle-in-software-engineering.html</link><description>&lt;p&gt;Patterns and Principles in Software Engineering, graduate course.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Tue, 23 Mar 2021 00:23:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2021-03-23:/patterns-and-principle-in-software-engineering.html</guid><category>courses</category><category>courses</category><category>teaching</category></item><item><title>An introduction to ANTLR in Python</title><link>https://m-zakeri.github.io/An-introduction-to-ANTLR-in-Python.html</link><description>&lt;p&gt;ANTLR is a parser generator that can generate the parser program from context-free grammar descriptions specified in the ANTLR grammar format. In this tutorial, I explain how we can generate and use the Java parser with ANTLR in the Python programming language.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Mon, 22 Mar 2021 23:00:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2021-03-22:/An-introduction-to-ANTLR-in-Python.html</guid><category>blog</category><category>blog</category><category>ANTLR</category><category>compiler</category><category>tutorial</category></item><item><title>Innovations on Automatic Test Data Generation</title><link>https://m-zakeri.github.io/innovations-on-automatic-test-data-generation.html</link><description>&lt;p&gt;Fuzz testing (Fuzzing) is a dynamic software testing technique. In this technique with repeated generation and injection of malformed test data to the software under test (SUT), we are looking for possible faults and vulnerabilities.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Mon, 22 Mar 2021 23:00:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2021-03-22:/innovations-on-automatic-test-data-generation.html</guid><category>blog</category><category>blog</category><category>Testing</category><category>Fuzzing</category></item><item><title>Dynamic Complex Network</title><link>https://m-zakeri.github.io/dynamic-complex-network.html</link><description>&lt;p&gt;Dynamic Complex Network, Graduate course.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Wed, 04 Mar 2020 21:12:00 +0330</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2020-03-04:/dynamic-complex-network.html</guid><category>courses</category><category>courses</category><category>teaching</category></item><item><title>Game Theory</title><link>https://m-zakeri.github.io/game-theory.html</link><description>&lt;p&gt;Game Theory, Graduate course.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Wed, 04 Mar 2020 21:12:00 +0330</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2020-03-04:/game-theory.html</guid><category>courses</category><category>courses</category><category>teaching</category></item><item><title>WordPress for beginning</title><link>https://m-zakeri.github.io/wordpress-for-beginning.html</link><description>&lt;p&gt;WordPress essential training for beginners&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Tue, 02 Apr 2019 02:00:00 +0430</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2019-04-02:/wordpress-for-beginning.html</guid><category>blog</category><category>blog</category><category>WordPress</category></item><item><title>Children and programming</title><link>https://m-zakeri.github.io/children-and-programming.html</link><description>&lt;p&gt;Getting started: Teach computer programming to your children, today!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Sun, 10 Mar 2019 21:13:00 +0330</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2019-03-10:/children-and-programming.html</guid><category>blog</category><category>blog</category></item><item><title>A survey of sequence-to-sequence learning with neural networks</title><link>https://m-zakeri.github.io/a-survey-of-sequence-to-sequence-learning-with-neural-networks.html</link><description>&lt;p&gt;A survey of sequence-to-sequence learning with deep neural networks.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Fri, 22 Feb 2019 12:30:00 +0330</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2019-02-22:/a-survey-of-sequence-to-sequence-learning-with-neural-networks.html</guid><category>blog</category><category>blog</category></item><item><title>Computer science at the heart of civilization</title><link>https://m-zakeri.github.io/computer-science-at-the-heart-of-civilization.html</link><description>&lt;p&gt;Over the past years, I have successfully integrated computer science into a variety of disciplines, including medicine (developing a non-invasive bladder monitoring system and jaundice prediction models), civil engineering (designing bridge management systems, detect attention state of people during exposure to construction noise), materials engineering (applying artificial intelligence to inverse material design), railway engineering (testing an interlocking system), sociology (creating an intelligent mixed research framework), sports (developing a swimming competition management system), and molecular physics (utilizing Raman spectroscopy).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Fri, 22 Feb 2019 12:30:00 +0330</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2019-02-22:/computer-science-at-the-heart-of-civilization.html</guid><category>blog</category><category>blog</category></item><item><title>Welcome</title><link>https://m-zakeri.github.io/welcome.html</link><description>&lt;p&gt;"&lt;strong&gt;L&lt;/strong&gt;ife &lt;strong&gt;I&lt;/strong&gt;s a &lt;strong&gt;F&lt;/strong&gt;ractal &lt;strong&gt;E&lt;/strong&gt;vent. Create unlimited values in limited time!", Morteza&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morteza</dc:creator><pubDate>Fri, 22 Feb 2019 12:30:00 +0330</pubDate><guid isPermaLink="false">tag:m-zakeri.github.io,2019-02-22:/welcome.html</guid><category>blog</category><category>blog</category></item></channel></rss>