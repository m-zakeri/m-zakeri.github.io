<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Morteza Zakeri - courses</title><link href="https://m-zakeri.github.io/" rel="alternate"></link><link href="https://m-zakeri.github.io/feeds/courses.atom.xml" rel="self"></link><id>https://m-zakeri.github.io/</id><updated>2025-03-17T20:45:00+03:30</updated><subtitle>PhD in Computer Science</subtitle><entry><title>Advanced Software Testing</title><link href="https://m-zakeri.github.io/advanced-software-testing.html" rel="alternate"></link><published>2025-03-17T20:45:00+03:30</published><updated>2025-03-17T20:45:00+03:30</updated><author><name>Morteza</name></author><id>tag:m-zakeri.github.io,2025-03-17:/advanced-software-testing.html</id><summary type="html">&lt;p&gt;Advanced Software Testing, Graduate course.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Advanced Software Testing&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Graduate Course&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Course Description&lt;/h2&gt;
&lt;p&gt;This course delves into advanced topics and cutting-edge techniques in software testing, empowering students to design and implement rigorous testing strategies for modern software systems. By covering methods such as automatic test data generation, metamorphic testing, fuzzing, hyper-property testing, and program analysis, the course equips students with tools to detect, isolate, and resolve complex software issues. Emphasis is placed on automation, scalability, and the theoretical foundations of testing to address real-world challenges in software quality assurance.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Course Objectives&lt;/h2&gt;
&lt;p&gt;By the end of this course, students will:
1. Understand the theoretical underpinnings of advanced software testing methodologies.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Develop practical skills in automated testing, including test data generation and fuzzing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply advanced techniques such as metamorphic testing and abstract interpretation to tackle testing challenges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analyze and verify software properties using program analysis and hyper-property testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore state-of-the-art tools and frameworks to enhance software reliability and security.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Syllabus&lt;/h2&gt;
&lt;h3&gt;Week 1-2: Fundamentals of Advanced Software Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Recap of basic software testing concepts&lt;/li&gt;
&lt;li&gt;Challenges in modern software testing&lt;/li&gt;
&lt;li&gt;Introduction to test automation and advanced testing methodologies&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 3-4: Automatic Test Data Generation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Theory and algorithms for test data generation&lt;/li&gt;
&lt;li&gt;Symbolic execution and constraint solving&lt;/li&gt;
&lt;li&gt;Tools for automated test generation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 5-6: Metamorphic Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Addressing the oracle problem in software testing&lt;/li&gt;
&lt;li&gt;Designing and applying metamorphic relations&lt;/li&gt;
&lt;li&gt;Applications of metamorphic testing in various domains&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 7-8: Fuzz Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to fuzzing techniques: black-box, gray-box, and white-box fuzzing&lt;/li&gt;
&lt;li&gt;Coverage-guided fuzzing and mutation-based testing&lt;/li&gt;
&lt;li&gt;Case studies of fuzzing tools (e.g., AFL, libFuzzer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 9-10: Hyper-Property Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understanding hyper-properties and their significance&lt;/li&gt;
&lt;li&gt;Techniques for verifying and validating hyper-properties&lt;/li&gt;
&lt;li&gt;Applications in security, privacy, and concurrency testing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 11-12: Program Analysis and Abstract Interpretation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Static and dynamic program analysis techniques&lt;/li&gt;
&lt;li&gt;Abstract interpretation and its role in bug detection&lt;/li&gt;
&lt;li&gt;Tools for program analysis (e.g., Clang Static Analyzer, CodeQL)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 13: Testing in the Real World&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Integration of advanced testing techniques in agile and DevOps environments&lt;/li&gt;
&lt;li&gt;Testing frameworks and automation pipelines&lt;/li&gt;
&lt;li&gt;Challenges and opportunities in adopting advanced testing practices&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 14: Capstone Project and Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Designing and implementing a comprehensive testing strategy for a real-world software system&lt;/li&gt;
&lt;li&gt;Final presentations and peer reviews&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Course Assessment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assignments (25%)&lt;/strong&gt;: Hands-on exercises in test automation, fuzzing, and program analysis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paper-based Exam (40%)&lt;/strong&gt;: Theoretical evaluation of advanced testing methodologies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Capstone Project (25%)&lt;/strong&gt;: Group project involving the application of advanced testing techniques.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Participation (10%)&lt;/strong&gt;: Contributions to discussions, code reviews, and peer learning.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Textbooks&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fuzzing: Brute Force Vulnerability Discovery&lt;/em&gt; by Michael Sutton, Adam Greene, and Pedram Amini&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Introduction to Software Testing&lt;/em&gt; by Paul Ammann and Jeff Offutt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Online Platforms&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Tools and frameworks such as AFL, libFuzzer, Z3 (solver), and Clang Static Analyzer&lt;/li&gt;
&lt;li&gt;Open-source repositories for testing datasets&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Research Papers&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Recent studies on advanced testing techniques from top-tier conferences (ICSE, FSE, ASE, ICPC, and ISSTA)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Familiarity with basic software testing principles and techniques.&lt;/li&gt;
&lt;li&gt;Knowledge of programming languages (e.g., Java, Python, C++) and data structures.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Contact Information&lt;/h2&gt;
&lt;p&gt;For inquiries, feel free to reach out via my webpage: &lt;a href="http://www.m-zakeri.github.io" target="_blank"&gt;www.m-zakeri.github.io&lt;/a&gt;.&lt;/p&gt;</content><category term="courses"></category><category term="courses"></category><category term="teaching"></category></entry><entry><title>Software Architectures</title><link href="https://m-zakeri.github.io/software-architectures.html" rel="alternate"></link><published>2025-03-07T21:00:00+03:30</published><updated>2025-03-07T21:00:00+03:30</updated><author><name>Morteza</name></author><id>tag:m-zakeri.github.io,2025-03-07:/software-architectures.html</id><summary type="html">&lt;p&gt;Software Architectures, Graduate course.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Course Description&lt;/h2&gt;
&lt;p&gt;This course offers an in-depth study of software architectures, emphasizing their role in creating scalable, maintainable, and high-performing systems. Students will explore various architectural styles, principles of clean architecture, and cutting-edge AI-driven architectural frameworks. By combining theoretical concepts with practical case studies, the course equips students with the skills to design robust architectures tailored to diverse application domains.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Course Objectives&lt;/h2&gt;
&lt;p&gt;By the end of this course, students will:
1. Understand the principles and best practices of modern software architecture.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Explore various architectural patterns, including monolithic, layered, microservices, and event-driven architectures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn and apply clean architecture principles for maintainable and testable systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design AI-driven architectures tailored to intelligent systems and applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evaluate and adapt architectural decisions to meet real-world challenges in scalability, security, and performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Syllabus&lt;/h2&gt;
&lt;h3&gt;Week 1-2: Introduction to Software Architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The role of architecture in software development&lt;/li&gt;
&lt;li&gt;Core concepts and trade-offs in architectural decisions&lt;/li&gt;
&lt;li&gt;Overview of architecture evaluation frameworks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 3-4: Classical Architectural Styles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Monolithic architecture: Advantages and limitations&lt;/li&gt;
&lt;li&gt;Layered architecture: Principles and practical applications&lt;/li&gt;
&lt;li&gt;Event-driven architecture: Asynchronous communication and scalability&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 5-6: Component-Based and Service-Oriented Architectures&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Component-based design principles&lt;/li&gt;
&lt;li&gt;Introduction to microservices architecture&lt;/li&gt;
&lt;li&gt;Best practices for service-oriented systems and RESTful APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 7-8: Principles of Clean Architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to clean architecture principles&lt;/li&gt;
&lt;li&gt;Designing for testability and maintainability&lt;/li&gt;
&lt;li&gt;Practical applications and refactoring for clean architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 9-10: AI-Driven Architectures&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Architectural patterns for machine learning and AI systems&lt;/li&gt;
&lt;li&gt;Designing scalable AI pipelines and inference systems&lt;/li&gt;
&lt;li&gt;Challenges and solutions for deploying AI in production&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 11-12: Advanced Topics in Software Architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Architecture for distributed systems and cloud-native applications&lt;/li&gt;
&lt;li&gt;Security considerations in architectural design&lt;/li&gt;
&lt;li&gt;Case studies: E-commerce, IoT, and healthcare systems&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 13: Emerging Trends in Architecture&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exploring serverless architectures and function-as-a-service (FaaS)&lt;/li&gt;
&lt;li&gt;Domain-driven design (DDD) and its applications&lt;/li&gt;
&lt;li&gt;Future directions in architectural practices&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 14: Capstone Project and Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Designing a software architecture for a real-world problem&lt;/li&gt;
&lt;li&gt;Final presentations and feedback from peers and instructors&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Course Assessment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assignments (25%)&lt;/strong&gt;: Hands-on tasks to design and evaluate architectural styles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paper-based Exam (40%)&lt;/strong&gt;: Theoretical evaluation of architectural principles and practices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Capstone Project (25%)&lt;/strong&gt;: Collaborative design and implementation of a software architecture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Participation (10%)&lt;/strong&gt;: Engagement in discussions, case studies, and peer reviews.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Textbooks&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Software Architecture in Practice&lt;/em&gt; by Len Bass, Paul Clements, and Rick Kazman&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Clean Architecture: A Craftsman's Guide to Software Structure and Design&lt;/em&gt; by Robert C. Martin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Online Platforms&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Tools for architectural design and modeling, such as ArchiMate and UML tools&lt;/li&gt;
&lt;li&gt;Cloud platforms (AWS, Azure, GCP) for hands-on exercises&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Research Papers&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Recent studies on software architectures from conferences such as WICSA and ECSA&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Basic understanding of software engineering and system design principles.&lt;/li&gt;
&lt;li&gt;Familiarity with programming and fundamental development methodologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Contact Information&lt;/h2&gt;
&lt;p&gt;For inquiries, feel free to reach out via my webpage: &lt;a href="http://www.m-zakeri.github.io" target="_blank"&gt;www.m-zakeri.github.io&lt;/a&gt;.&lt;/p&gt;</content><category term="courses"></category><category term="courses"></category><category term="teaching"></category></entry><entry><title>Advanced Software Engineering</title><link href="https://m-zakeri.github.io/advanced-software-engineering.html" rel="alternate"></link><published>2021-03-23T00:23:00+04:30</published><updated>2021-03-23T00:23:00+04:30</updated><author><name>Morteza</name></author><id>tag:m-zakeri.github.io,2021-03-23:/advanced-software-engineering.html</id><summary type="html">&lt;p&gt;Advanced Software Engineering, graduate course.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The AUT advanced software engineering (ASE) course aims at teaching the latest and emerging topics and advances in the field of software engineering to the students who are already familiar with basic subjects in the field. Here, I will share relevant materials and resources with you.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Course Description&lt;/h2&gt;
&lt;p&gt;This course delves into the latest trends, emerging topics, and cutting-edge advances in the field of software engineering. Designed for students with a foundational understanding of software engineering concepts, the course covers innovative methodologies, tools, and frameworks that are shaping the modern software development landscape. Through in-depth case studies, hands-on projects, and discussions on real-world challenges, students will explore how to drive innovation and implement advanced practices in software engineering.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Course Objectives&lt;/h2&gt;
&lt;p&gt;By the end of this course, students will:
1. Gain familiarity with the latest research and advancements in software engineering.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Learn to adopt and adapt emerging methodologies and frameworks for large-scale software systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understand the impact of intelligent tools and automation in the software development lifecycle (SDLC).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore advanced topics like microservices, cloud-native development, and software observability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Critically assess and integrate evolving practices to solve modern software engineering challenges.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Syllabus&lt;/h2&gt;
&lt;h3&gt;Week 1-2: Introduction to Advanced Software Engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Overview of modern challenges in software engineering&lt;/li&gt;
&lt;li&gt;Emerging trends and technologies in the field&lt;/li&gt;
&lt;li&gt;Recap of fundamental principles and frameworks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 3-4: Continuous Integration, Deployment, and Delivery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CI/CD pipelines and automation tools&lt;/li&gt;
&lt;li&gt;Best practices for seamless software deployment&lt;/li&gt;
&lt;li&gt;Ensuring quality and reliability in fast-paced development&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 5-6: DevOps and Cloud-Native Software Engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Principles of DevOps culture and practices&lt;/li&gt;
&lt;li&gt;Cloud-native development and containerization with Docker and Kubernetes&lt;/li&gt;
&lt;li&gt;Serverless architectures and their applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 7-8: Software Observability and Resilience&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Monitoring, logging, and tracing software systems&lt;/li&gt;
&lt;li&gt;Building resilient applications with fault tolerance&lt;/li&gt;
&lt;li&gt;Best practices for incident response and root cause analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 9-10: Intelligent Tools and Automation in Software Engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Machine learning applications in the SDLC&lt;/li&gt;
&lt;li&gt;Automated code generation, testing, and debugging&lt;/li&gt;
&lt;li&gt;Intelligent software refactoring and evolution&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 11-12: Advanced Software Architectures&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Exploring microservices and event-driven architectures&lt;/li&gt;
&lt;li&gt;Designing scalable, maintainable, and secure systems&lt;/li&gt;
&lt;li&gt;Understanding domain-driven design (DDD)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 13: Ethical and Societal Aspects of Software Engineering&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Understanding the social and ethical implications of modern software&lt;/li&gt;
&lt;li&gt;Discussing data privacy, security, and sustainability in engineering practices&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 14: Capstone Project and Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Applying advanced concepts to design and implement a solution to a real-world problem&lt;/li&gt;
&lt;li&gt;Final presentations and peer reviews&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Course Assessment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assignments (25%)&lt;/strong&gt;: Hands-on tasks focusing on advanced tools and techniques.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paper-based Exam (40%)&lt;/strong&gt;: Evaluation of theoretical understanding of emerging topics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Capstone Project (25%)&lt;/strong&gt;: Team-based project addressing real-world challenges in software engineering.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Participation (10%)&lt;/strong&gt;: Contribution to discussions, peer reviews, and active engagement in the course.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Textbooks&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/em&gt; by Jez Humble and David Farley&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Building Microservices: Designing Fine-Grained Systems&lt;/em&gt; by Sam Newman&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Online Platforms&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Cloud platforms such as AWS, Azure, or Google Cloud for practical exercises&lt;/li&gt;
&lt;li&gt;Tools like Jenkins, Docker, Kubernetes, and Prometheus&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Research Papers&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Recent publications on software engineering from top conferences like ICSE and ASE&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A solid foundation in software engineering principles.&lt;/li&gt;
&lt;li&gt;Familiarity with basic software development methodologies and tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Contact Information&lt;/h2&gt;
&lt;p&gt;For inquiries, feel free to reach out via my webpage: &lt;a href="http://www.m-zakeri.github.io" target="_blank"&gt;www.m-zakeri.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This structure ensures clarity and provides a robust roadmap for your &lt;em&gt;Advanced Software Engineering&lt;/em&gt; course. Let me know if you'd like to refine any part!&lt;/p&gt;
&lt;h2&gt;Course history&lt;/h2&gt;
&lt;h3&gt;Teaching assistant&lt;/h3&gt;
&lt;p&gt;I was teaching assistant of Advanced Software Engineering M.Sc. and Ph.D. course by &lt;a href="http://parsa.iust.ac.ir/" target="_blank"&gt;Dr. Saeed Parsa&lt;/a&gt; for six semesters at Iran University of Science and Technology. 
Our teaching materials during these three years are available to view and download.&lt;/p&gt;
&lt;h3&gt;Useful links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://parsa.iust.ac.ir/courses/advanced-software-engineering/" target="_blank"&gt;Course official website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="courses"></category><category term="courses"></category><category term="teaching"></category></entry><entry><title>Compilers</title><link href="https://m-zakeri.github.io/compilers.html" rel="alternate"></link><published>2021-03-23T00:23:00+04:30</published><updated>2021-03-23T00:23:00+04:30</updated><author><name>Morteza</name></author><id>tag:m-zakeri.github.io,2021-03-23:/compilers.html</id><summary type="html">&lt;p&gt;Compiler design and constructions, Undergraduate course (Bachelor). The course is designed to:&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Provide an in-depth understanding of the principles, techniques, and tools used in the design and implementation of compilers.&lt;/li&gt;
&lt;li&gt;Equip students with the ability to write and optimize programs by understanding how high-level code is translated into machine-level instructions.&lt;/li&gt;
&lt;li&gt;Introduce concepts of language parsing, code generation, and optimization techniques that are critical for the development of efficient and reliable software.&lt;/li&gt;
&lt;li&gt;Foster the ability to analyze and improve existing compiler systems, as well as design new ones from scratch.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;By the end of this course, students will be able to:
1. Understand the fundamental phases of a compiler, including lexical analysis, syntax analysis, semantic analysis, code generation, and optimization.
2. Develop skills to implement key components of a compiler, such as parsers, symbol tables, and intermediate code generators.
3. Recognize and utilize various parsing techniques, including top-down and bottom-up parsing strategies.
4. Apply optimization techniques to improve the performance of compiled code.
5. Gain exposure to modern tools and technologies used in compiler construction, such as Lex and Yacc.&lt;/p&gt;
&lt;h2&gt;Syllabus&lt;/h2&gt;
&lt;h3&gt;1. Introduction to Compiler Design&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Role of a compiler in the software development lifecycle&lt;/li&gt;
&lt;li&gt;Overview of programming languages and their features&lt;/li&gt;
&lt;li&gt;Architecture of a compiler&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Lexical Analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lexical tokens, patterns, and lexemes&lt;/li&gt;
&lt;li&gt;Design of lexical analyzers&lt;/li&gt;
&lt;li&gt;Introduction to Lex and its usage&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. Syntax Analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Context-free grammars and parse trees&lt;/li&gt;
&lt;li&gt;Top-down parsing (recursive descent, LL) and bottom-up parsing (LR, LALR)&lt;/li&gt;
&lt;li&gt;Error detection and recovery mechanisms in parsers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. Semantic Analysis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Role of semantic analysis in a compiler&lt;/li&gt;
&lt;li&gt;Type checking and type inference&lt;/li&gt;
&lt;li&gt;Symbol tables and attribute grammars&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5. Intermediate Code Generation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Representations such as three-address code, quadruples, and abstract syntax trees&lt;/li&gt;
&lt;li&gt;Translating high-level constructs into intermediate representations&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;6. Code Optimization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Local vs global optimization techniques&lt;/li&gt;
&lt;li&gt;Loop optimizations, dead code elimination, and inlining&lt;/li&gt;
&lt;li&gt;Role of data-flow analysis in optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;7. Code Generation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Instruction selection and register allocation&lt;/li&gt;
&lt;li&gt;Basic blocks and flow graphs&lt;/li&gt;
&lt;li&gt;Generating efficient machine-level code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;8. Advanced Topics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Just-In-Time (JIT) Compilation&lt;/li&gt;
&lt;li&gt;Compiler frameworks (LLVM, GCC)&lt;/li&gt;
&lt;li&gt;Introduction to domain-specific languages (DSLs)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;9. Project and Case Studies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Design and implementation of a small-scale compiler&lt;/li&gt;
&lt;li&gt;Case studies on modern compiler systems and frameworks&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Teaching assistant&lt;/h2&gt;
&lt;h3&gt;Foreword&lt;/h3&gt;
&lt;p&gt;I was teaching assistant of Compiler Design and Construction B.Sc. course by &lt;a href="http://parsa.iust.ac.ir/" target="_blank"&gt;Dr. Saeed Parsa&lt;/a&gt; for seven semesters (more than three years) at Iran University of Science and Technology. Our teaching materials during these three years are available to view and download.&lt;/p&gt;
&lt;p&gt;I put all source code that I developed to practically teach compiler  to students on the GitHub page, the &lt;a href="http://parsa.iust.ac.ir/courses/compilers/" target="_blank"&gt;IUST compiler course&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;Useful links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://parsa.iust.ac.ir/courses/compilers/" target="_blank"&gt;ISUT Compiler Course Official page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://m-zakeri.github.io/IUSTCompiler/" target="_blank"&gt;ISUT Compiler Course GitHub Page (in English)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://compileriust.github.io/" target="_blank"&gt;ISUT Compiler Course GitHub Page (in Persian)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Projects&lt;/h3&gt;
&lt;p&gt;I designed and planned some &lt;strong&gt;practical&lt;/strong&gt; projects about the applications of compiler science in &lt;strong&gt;program analysis&lt;/strong&gt;.
The projects shown in Table 1 have been assigned to the students who take the IUST compiler course during different semesters. Click on the link in the "Project" column to see the project proposal. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table 1:&lt;/strong&gt; Compiler projects.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Project&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Semesters&lt;/th&gt;
&lt;th&gt;Courses&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://m-zakeri.github.io/IUSTCompiler/projects/core_symbol_table_development/" target="_blank"&gt;OpenUnderstand  2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Low-level source   code metrics calculation&lt;/td&gt;
&lt;td&gt;Spring 2022&lt;/td&gt;
&lt;td&gt;Compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://m-zakeri.github.io/IUSTCompiler/projects/core_symbol_table_development/" target="_blank"&gt;OpenUnderstand&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Symbols table   development&lt;/td&gt;
&lt;td&gt;Fall 2021,   Spring 2022,&lt;/td&gt;
&lt;td&gt;Compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://m-zakeri.github.io/IUSTCompiler/projects/core_software_metrics_development/" target="_blank"&gt;QualityMeter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;- Source code   quality attribute computation     - Refactoring   opportunity detection&lt;/td&gt;
&lt;td&gt;Fall 2021&lt;/td&gt;
&lt;td&gt;Advanced compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://m-zakeri.github.io/IUSTCompiler/projects/core_code_smell_development/" target="_blank"&gt;CodART 2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Source code   smell detection&lt;/td&gt;
&lt;td&gt;Spring 2021   (Cancelled)&lt;/td&gt;
&lt;td&gt;Compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://m-zakeri.github.io/IUSTCompiler/projects/core_refactoring_to_design_patterns_development/" target="_blank"&gt;CodART&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Source code   refactoring&lt;/td&gt;
&lt;td&gt;Fall 2020,   Spring 2021,&lt;/td&gt;
&lt;td&gt;Compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://m-zakeri.github.io/IUSTCompiler/projects/core_refactorings_development/" target="_blank"&gt;CodART&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Refactoring   to design pattern at the source code level&lt;/td&gt;
&lt;td&gt;Fall 2020&lt;/td&gt;
&lt;td&gt;Advanced compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://m-zakeri.github.io/Compilers/projects/core_clean_code_development/" target="_blank"&gt;CleanCode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Source code   smell detection&lt;/td&gt;
&lt;td&gt;Fall 2019,   Spring 2020&lt;/td&gt;
&lt;td&gt;Compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://m-zakeri.github.io/Compilers/projects/core_source_code_instrumentation_development/" target="_blank"&gt;CodA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Source code instrumentation   and testbed analysis tool&lt;/td&gt;
&lt;td&gt;Fall 2018&lt;/td&gt;
&lt;td&gt;Compiler /     Advanced compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://m-zakeri.github.io/Compilers/projects/mini_java_compiler_development/" target="_blank"&gt;ANTLR MiniJava&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Parse-tree   and intermediate code generation for the MiniJava programming language with   ANTLR&lt;/td&gt;
&lt;td&gt;Fall 2016,   Spring 2017&lt;/td&gt;
&lt;td&gt;Compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;As a student&lt;/h2&gt;
&lt;p&gt;I always enjoy learning about compilers, code transformation, and their application in automated software engineering. I firmly believe that the next generation of software engineers are intelligent white-box compilers! Such compilers are structure-aware, context-aware, and domain-aware, assisting the programmer in writing high-quality and testable programs. 
Compilers helped artificial intelligence (AI) in the past, and now AI boosts compilers!&lt;/p&gt;</content><category term="courses"></category><category term="courses"></category><category term="teaching"></category></entry><entry><title>Patterns and Principle in Software Engineering</title><link href="https://m-zakeri.github.io/patterns-and-principle-in-software-engineering.html" rel="alternate"></link><published>2021-03-23T00:23:00+04:30</published><updated>2021-03-23T00:23:00+04:30</updated><author><name>Morteza</name></author><id>tag:m-zakeri.github.io,2021-03-23:/patterns-and-principle-in-software-engineering.html</id><summary type="html">&lt;p&gt;Patterns and Principles in Software Engineering, graduate course.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Course Description&lt;/h2&gt;
&lt;p&gt;This course explores the foundational principles and design patterns that underpin modern software engineering. It aims to equip students with a deep understanding of reusable solutions, architectural patterns, and best practices to enhance the quality, maintainability, and scalability of software systems. Through a mix of theoretical concepts and practical applications, students will learn how to apply these principles effectively in real-world scenarios.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Course Objectives&lt;/h2&gt;
&lt;p&gt;By the end of this course, students will:
1. Understand core software design principles such as SOLID, DRY, and KISS.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Analyze and apply common software design patterns including Creational, Structural, and Behavioral patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Develop skills to architect scalable and maintainable software systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore principles of software evolution, refactoring, and maintainability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gain insights into modern software development practices, including agile development and DevOps principles.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Syllabus&lt;/h2&gt;
&lt;h3&gt;Week 1-2: Introduction to Software Engineering Principles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Overview of Software Engineering&lt;/li&gt;
&lt;li&gt;Key concepts: Scalability, Maintainability, and Modularity&lt;/li&gt;
&lt;li&gt;Introduction to SOLID Principles and Object-Oriented Design&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 3-4: Design Patterns - An Overview&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;What are Design Patterns?&lt;/li&gt;
&lt;li&gt;Types of Patterns: Creational, Structural, Behavioral&lt;/li&gt;
&lt;li&gt;Case studies of practical design pattern applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 5-6: Creational Patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Singleton, Factory, Abstract Factory, Builder, Prototype&lt;/li&gt;
&lt;li&gt;Practical examples and coding exercises&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 7-8: Structural Patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy&lt;/li&gt;
&lt;li&gt;Designing software with structural patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 9-10: Behavioral Patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Chain of Responsibility, Command, Interpreter, Iterator&lt;/li&gt;
&lt;li&gt;Mediator, Memento, Observer, State, Strategy, Template, Visitor&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 11: Architectural Patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MVC (Model-View-Controller), MVP, MVVM&lt;/li&gt;
&lt;li&gt;Microservices, Event-Driven Architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 12: Software Evolution and Refactoring&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Principles of software refactoring&lt;/li&gt;
&lt;li&gt;Techniques to improve existing codebases while maintaining functionality&lt;/li&gt;
&lt;li&gt;Tools and practices for code quality improvement&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 13: Patterns in Agile Development and DevOps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Continuous Integration and Continuous Deployment (CI/CD) Practices&lt;/li&gt;
&lt;li&gt;Design patterns supporting agile development&lt;/li&gt;
&lt;li&gt;Design for testability and automation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 14: Capstone Project and Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Applying learned patterns and principles to a real-world project&lt;/li&gt;
&lt;li&gt;Final presentations and feedback&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Course Assessment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assignments (25%)&lt;/strong&gt;: Weekly exercises on applying patterns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paper-based Exam (40%)&lt;/strong&gt;: Theoretical and practical understanding of design principles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Capstone Project (25%)&lt;/strong&gt;: Collaborative project designing a software system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Participation (10%)&lt;/strong&gt;: Engaging in discussions and code reviews.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Textbooks&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt; by Erich Gamma et al.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Clean Architecture: A Craftsman’s Guide to Software Structure and Design&lt;/em&gt; by Robert C. Martin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Online Platforms&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;GitHub for version control and collaboration&lt;/li&gt;
&lt;li&gt;IDEs like IntelliJ IDEA or Visual Studio Code for coding exercises&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Additional Resources&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Documentation for tools and frameworks used in the course&lt;/li&gt;
&lt;li&gt;Research papers on software architecture and design&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Basic understanding of programming concepts.&lt;/li&gt;
&lt;li&gt;Familiarity with object-oriented programming (OOP) and data structures.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Contact Information&lt;/h2&gt;
&lt;p&gt;For questions, reach out via my webpage: &lt;a href="http://www.m-zakeri.github.io" target="_blank"&gt;www.m-zakeri.github.io&lt;/a&gt;.&lt;/p&gt;</content><category term="courses"></category><category term="courses"></category><category term="teaching"></category></entry><entry><title>Dynamic Complex Network</title><link href="https://m-zakeri.github.io/dynamic-complex-network.html" rel="alternate"></link><published>2020-03-04T21:12:00+03:30</published><updated>2020-03-04T21:12:00+03:30</updated><author><name>Morteza</name></author><id>tag:m-zakeri.github.io,2020-03-04:/dynamic-complex-network.html</id><summary type="html">&lt;p&gt;Dynamic Complex Network, Graduate course.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Course Description&lt;/h2&gt;
&lt;p&gt;This course provides an in-depth exploration of complex dynamic networks, focusing on their structure, behavior, and applications across various domains. Students will study the mathematical foundations, analysis techniques, and real-world implications of network dynamics. By examining interconnected systems, ranging from social networks to biological and technological networks, students will gain the tools necessary to model, analyze, and optimize network-based systems in the real world.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Course Objectives&lt;/h2&gt;
&lt;p&gt;By the end of this course, students will:
1. Understand the fundamental concepts and theories of network science.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Analyze and characterize the dynamics of complex networks, including robustness, scalability, and efficiency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply mathematical and computational models to study network behavior and emergent phenomena.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore the role of networks in diverse applications, including communication systems, social systems, biology, and finance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Develop practical skills in modeling and simulating dynamic networks using advanced tools and frameworks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Syllabus&lt;/h2&gt;
&lt;h3&gt;Week 1-2: Fundamentals of Complex Networks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to network science&lt;/li&gt;
&lt;li&gt;Graph theory basics: nodes, edges, adjacency matrices&lt;/li&gt;
&lt;li&gt;Types of networks: random, small-world, scale-free, and multiplex&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 3-4: Network Structure and Properties&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Key network metrics: degree distribution, centrality, clustering coefficient&lt;/li&gt;
&lt;li&gt;Community detection and modularity&lt;/li&gt;
&lt;li&gt;Real-world network structures and their implications&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 5-6: Dynamic Processes on Networks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Diffusion and spreading processes (e.g., information, diseases)&lt;/li&gt;
&lt;li&gt;Synchronization and collective behavior&lt;/li&gt;
&lt;li&gt;Contagion models in social and biological networks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 7-8: Robustness and Resilience of Networks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Vulnerability analysis and fault tolerance&lt;/li&gt;
&lt;li&gt;Cascading failures in critical infrastructure networks&lt;/li&gt;
&lt;li&gt;Designing robust and resilient networked systems&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 9-10: Network Optimization and Control&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Controllability of complex networks&lt;/li&gt;
&lt;li&gt;Optimizing network flows and resource allocation&lt;/li&gt;
&lt;li&gt;Applications in transportation and communication systems&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 11-12: Advanced Topics in Network Science&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Temporal networks and evolving structures&lt;/li&gt;
&lt;li&gt;Multilayer and interconnected networks&lt;/li&gt;
&lt;li&gt;Data-driven approaches to network analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 13: Applications of Complex Dynamic Networks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Social networks and influence propagation&lt;/li&gt;
&lt;li&gt;Biological and ecological networks&lt;/li&gt;
&lt;li&gt;Applications in finance, power grids, and smart cities&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Week 14: Capstone Project and Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Designing, simulating, and analyzing a complex network for a chosen domain&lt;/li&gt;
&lt;li&gt;Final presentations and peer reviews&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Course Assessment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assignments (25%)&lt;/strong&gt;: Analytical exercises and computational tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Papsr-based Exam (40%)&lt;/strong&gt;: Theoretical understanding of network concepts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Capstone Project (25%)&lt;/strong&gt;: Team-based project involving real-world network analysis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Participation (10%)&lt;/strong&gt;: Active engagement in discussions, workshops, and reviews.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Textbooks&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Networks: An Introduction&lt;/em&gt; by Mark Newman&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Dynamical Processes on Complex Networks&lt;/em&gt; by Alain Barrat et al.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Online Platforms&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Software tools such as Gephi, NetworkX (Python), and Cytoscape for network modeling and analysis&lt;/li&gt;
&lt;li&gt;Online datasets for real-world network examples&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Research Papers&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;Recent publications on network science and dynamic systems from top journals&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A basic understanding of graph theory and linear algebra.&lt;/li&gt;
&lt;li&gt;Familiarity with programming and data analysis tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Contact Information&lt;/h2&gt;
&lt;p&gt;For inquiries, feel free to reach out via my webpage: &lt;a href="http://www.m-zakeri.github.io"&gt;www.m-zakeri.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Course history&lt;/h2&gt;
&lt;h2&gt;Teaching assistant&lt;/h2&gt;
&lt;p&gt;I was teaching assistant of Dynamic Complex Network M.Sc. and Ph.D. course by &lt;a href="http://webpages.iust.ac.ir/h_rahmani" target="_blank"&gt;Dr. Hossein Rahmani&lt;/a&gt; for one semester (Winter and spring 2020) at Iran University of Science and Technology. 
Our teaching materials during these two years are available to view and download.&lt;/p&gt;
&lt;h3&gt;Useful links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://m-zakeri.github.io/iust_complex_network" target="_blank"&gt;Course code samples and homework solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://m-zakeri.github.io/CodART/" target="_blank"&gt;Software clustering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="courses"></category><category term="courses"></category><category term="teaching"></category></entry><entry><title>Game Theory</title><link href="https://m-zakeri.github.io/game-theory.html" rel="alternate"></link><published>2020-03-04T21:12:00+03:30</published><updated>2020-03-04T21:12:00+03:30</updated><author><name>Morteza</name></author><id>tag:m-zakeri.github.io,2020-03-04:/game-theory.html</id><summary type="html">&lt;p&gt;Game Theory, Graduate course.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The course discusses the fundamentals of game theory. Game theory is the study of mathematical models of strategic interactions among rational agents. It has applications in all fields of social science and logic, economics, systems science, and computer science. Initially, it addresses two-person zero-sum games, in which each participant's gains or losses are exactly balanced by those of other participants. Game theory has recently found many applications in formulating network resource allocation problems and coordinating network entities' behavior to achieve a stable operating point with global consensus property.&lt;/p&gt;
&lt;h2&gt;Teaching assistant&lt;/h2&gt;
&lt;h2&gt;Foreword&lt;/h2&gt;
&lt;p&gt;I was teaching assistant of Game Theory M.Sc. and Ph.D. course by &lt;a href="http://webpages.iust.ac.ir/vhakami" target="_blank"&gt;Dr. Vesal Hakami&lt;/a&gt; for one semester (Winter and spring 2020) at Iran University of Science and Technology. Here, our teaching materials during these two years are available to view and download&lt;/p&gt;
&lt;h3&gt;Useful links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dropbox.com/s/tup6h56v6hvfxe5/hw01.pdf?dl=0" target="_blank"&gt;Homework #1 (PDF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dropbox.com/s/1holxfir0f5qfmn/hw02.pdf?dl=0" target="_blank"&gt;Homework #2 (PDF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dropbox.com/s/p36nebp41n0j98o/hw03.pdf?dl=0" target="_blank"&gt;Homework #3 (PDF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dropbox.com/s/zdxudn8hyj4empo/GT982_online_midterm_instructions.pdf?dl=0" target="_blank"&gt;Midterm instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="courses"></category><category term="courses"></category><category term="teaching"></category></entry></feed>